{
  "root": true,
  "extends": [ "plugin:prettier/recommended",
    // "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:@typescript-eslint/eslint-recommended"],
  "parser": "@typescript-eslint/parser",
  "plugins": ["@typescript-eslint/eslint-plugin", "prettier", "simple-import-sort"],
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },
  "ignorePatterns": [".eslintrc.json"],
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [
          ".js",
          ".ts",
          ".tsx"
        ]
      }
    }
  },
  "parserOptions": {
    "ecmaVersion": 2018,
    "project": "./tsconfig.eslint.json",
    "sourceType": "module"
  },
  "rules": {
    "no-console": ["warn", { "allow": ["warn", "error", "info"] }],
    "no-debugger": "warn",
    "no-use-before-define": "off",
    "no-restricted-exports": "off",
    "func-names": ["warn", "as-needed"],
    "max-len": [
      "error",
      120,
      2,
      {
        "ignoreUrls": true,
        "ignoreComments": false,
        "ignoreRegExpLiterals": false,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": false
      }
    ],
    "operator-linebreak": "off",
    "implicit-arrow-linebreak": "off",
    "function-paren-newline": "off",
    "consistent-return": "off",
    "@typescript-eslint/no-empty-interface": [
			"error",
			{
				"allowSingleExtends": true
			}
		],
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-unused-vars": "warn",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/array-type": ["error", { "default": "array-simple" }],
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-inferrable-types": "error",
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/no-unsafe-call": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-return": "off",
    "@typescript-eslint/quotes": [
      "error",
      "single",
      {
        "avoidEscape": true
      }
    ],
    "@typescript-eslint/no-unsafe-argument": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "Object": {
            "message": "Avoid using the `Object` type. Did you mean `object`?"
          },
          "Function": {
            "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
          },
          "Boolean": {
            "message": "Avoid using the `Boolean` type. Did you mean `boolean`?",
            "fixWith": "boolean"
          },
          "Number": {
            "message": "Avoid using the `Number` type. Did you mean `number`?",
            "fixWith": "number"
          },
          "Symbol": {
            "message": "Avoid using the `Symbol` type. Did you mean `symbol`?",
            "fixWith": "symbol"
          },
          "String": {
            "message": "Avoid using the `String` type. Did you mean `string`?",
            "fixWith": "string"
          },
          "{}": {
            "message": "Use Record<K, V> instead",
            "fixWith": "Record<K, V>"
          },
          "object": {
            "message": "Use Record<K, V> instead",
            "fixWith": "Record<K, V>"
          }
        }
      }
    ],
    "object-curly-newline": "off",
    "import/no-unresolved": "off"
  },
  "overrides": [
    {
      "files": [
        "*.+(ts|tsx)"
      ],
      "rules": {
        "@typescript-eslint/no-unused-vars": "error",
        "simple-import-sort/imports": [
          "warn",
          {
            "groups": [
              // Node.js builtins. You could also generate this regex if you use a `.js` config.
              [
                "^(assert|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|https|module|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks)(/.*|$)"
              ],
              // React
              [
                "^@nestjs"
              ],
              // Layout.
              [
                "^@/shared"
              ],
              // Packages.
              [
                "^@?\\w"
              ],
              // Side effect imports.
              [
                "^\\u0000"
              ],
              // Relative imports, put parent imports last
              [
                "^\\./(?=.*/)(?!/?$)",
                "^\\.\\.(?!/?$)",
                "^\\.\\./?$"
              ],
              // Folders imports.
              [
                ".*partials.*",
                "^\\.(?!/?$)",
                "^\\./?$"
              ]
            ]
          }
        ]
      }
    }
  ]
}
